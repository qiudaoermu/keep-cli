#!/usr/bin/env node
const inquirer = require("inquirer");
const program = require("commander");
const chalk = require("chalk");
const ora = require("ora");
const download = require("download-git-repo");
const tplObj = require(`${__dirname}/../template`);
const loaderSetting = require("./config/loaderSetting");
const execFiglet = require("./lib/figlet");
const createProject = require("./lib/createProject");
const fs = require("fs");
program.usage("<template-name> [project-name]");
program.parse(process.argv);
// 当没有输入参数的时候给个提示
// if (program.args.length < 1) return program.help();

// 好比 vue init webpack project-name 的命令一样，第一个参数是 webpack，第二个参数是 project-name
let projectName = program.args[0];

if (!projectName) {
  console.log(chalk.red("\n Project should not be empty! \n "));
  return;
}
// createProject(projectName);
inquirer.prompt(loaderSetting.frontTypes).then((answers) => {
  // 过滤 unicode 字符
  const frontType = answers.name;
  inquirer.prompt(loaderSetting.cssLoader).then((answers) => {
    const cssLoader = answers.name;
    const url = tplObj[frontType];
    // console log logo
    execFiglet();

    downloadGitRepo(url);
  });
});
const pwd = process.cwd();
const downloadGitRepo = (url) => {
  console.log(chalk.white("\n Start generating... \n"));
  // 出现加载图标
  const spinner = ora("Downloading...");
  spinner.start();
  console.log(chalk.white("\n"), url);
  // 执行下载方法并传入参数
  download(url, projectName, (err) => {
    if (err) {
      spinner.fail();
      console.log(chalk.red(`Generation failed. ${err}`));
      return;
    }

    let originalName = url.replace("qiudaoermu/", "");
    try {
      fs.renameSync(pwd + "/" + originalName, pwd + "/" + projectName);
    } catch (error) {
      console.log(error);
    }
    // 结束加载图标
    spinner.succeed();
    console.log(chalk.green("\n Generation completed!"));
    console.log("\n To get started");
    console.log(`\n    cd ${projectName} \n`);
  });
};
